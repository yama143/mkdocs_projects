{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bots doing evil good. Warning Proceed at your own risk.","title":"Home"},{"location":"#bots-doing-evil-good","text":"Warning Proceed at your own risk.","title":"Bots doing evil good."},{"location":"about/","text":"About Things about stuff. The end.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#things-about-stuff","text":"The end.","title":"Things about stuff."},{"location":"bots/","tags":["bots","python","evil"],"text":"Make Bots Get started making a bot So, you want to make an evil twitter bot? There are lots of ways. This is one. Get a Twitter Dev Account First, go to developer.twitter.com Sign Up for a developer account It'll take a bit of back and forth with Twitter, but you'll get it. Be persistent. Learn Python python.org/about/gettingstarted w3schools.com/python geeksforgeeks.org/python-programming-language Use Tweepy tweepy.org Now for the GOOD stuff. Annoy a Congressman's Intern Like 100 of his Tweets import tweepy class TweepyApi : def __init__ ( self ): self . consumer_key = \"YOUR_CONSUMER_KEY_HERE\" self . consumer_secret = \"YOUR_CONSUMER_SECRET_HERE\" self . access_token = \"YOUR_ACCESS_TOKEN_HERE\" self . access_token_secret = \"YOUR__ACCESS_TOKEN_SECRET_HERE\" self . api = tweepy . API ( self . get_auth (), wait_on_rate_limit = True ) def get_auth ( self ): auth = tweepy . OAuthHandler ( self . consumer_key , self . consumer_secret ) auth . set_access_token ( self . access_token , self . access_token_secret ) return auth def annoy_don_bacons_intern (): me = TweepyApi () . api screen_name_ = 'donjbacon' dons_tweets = me . user_timeline ( screen_name = screen_name_ , trim_user = True , count = 100 ) for tweet in dons_tweets : me . create_favorite ( id = tweet . id ) def main (): annoy_don_bacons_intern () if __name__ == '__main__' : main ()","title":"Make Bots"},{"location":"bots/#make-bots","text":"","title":"Make Bots"},{"location":"bots/#get-started-making-a-bot","text":"So, you want to make an evil twitter bot? There are lots of ways. This is one.","title":"Get started making a bot"},{"location":"bots/#get-a-twitter-dev-account","text":"First, go to developer.twitter.com Sign Up for a developer account It'll take a bit of back and forth with Twitter, but you'll get it. Be persistent.","title":"Get a Twitter Dev Account"},{"location":"bots/#learn-python","text":"python.org/about/gettingstarted w3schools.com/python geeksforgeeks.org/python-programming-language","title":"Learn Python"},{"location":"bots/#use-tweepy","text":"tweepy.org","title":"Use Tweepy"},{"location":"bots/#now-for-the-good-stuff","text":"","title":"Now for the GOOD stuff."},{"location":"bots/#annoy-a-congressmans-intern","text":"Like 100 of his Tweets import tweepy class TweepyApi : def __init__ ( self ): self . consumer_key = \"YOUR_CONSUMER_KEY_HERE\" self . consumer_secret = \"YOUR_CONSUMER_SECRET_HERE\" self . access_token = \"YOUR_ACCESS_TOKEN_HERE\" self . access_token_secret = \"YOUR__ACCESS_TOKEN_SECRET_HERE\" self . api = tweepy . API ( self . get_auth (), wait_on_rate_limit = True ) def get_auth ( self ): auth = tweepy . OAuthHandler ( self . consumer_key , self . consumer_secret ) auth . set_access_token ( self . access_token , self . access_token_secret ) return auth def annoy_don_bacons_intern (): me = TweepyApi () . api screen_name_ = 'donjbacon' dons_tweets = me . user_timeline ( screen_name = screen_name_ , trim_user = True , count = 100 ) for tweet in dons_tweets : me . create_favorite ( id = tweet . id ) def main (): annoy_don_bacons_intern () if __name__ == '__main__' : main ()","title":"Annoy a Congressman's Intern"},{"location":"random/","text":"Random A bunch of stuff to help me remember how to do things in mkdocs-material. Abbreviations Admonitions Note I'm a note annotation. Note I'm a collapsable note annotation! Annotations Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! I can contain code , formatted text , images, ... basically anything that can be expressed in Markdown. Buttons DO NOT PUSH THIS DEFAULT BUTTON DO NOT PUSH THIS PRIMARY BUTTON DO NOT PUSH THIS ICON BUTTON Code Blocks default from rich import inspect with title now with a title! from rich import inspect with linenums now with linenums! 1 2 3 4 from rich import inspect list1 = [ 'thing1' , 'thing2' , 'thing3' ] inspect ( list1 , all = True ) with highlights now with highlights! 1 2 3 4 from rich import inspect list1 = [ 'thing1' , 'thing2' , 'thing3' ] inspect ( list1 , all = True ) in-line The range () function is used to generate a sequence of numbers. Tables default Method Description GET Fetch resource PUT Update resource DELETE Delete resource right-aligned Method Description GET Fetch resource PUT Update resource DELETE Delete resource right-and-left-aligned Method Description GET Fetch resource PUT Update resource DELETE Delete resource sortable? Method Description GET Fetch resource PUT Update resource DELETE Delete resource Lists unordered Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. ordered Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu","title":"Random"},{"location":"random/#random","text":"A bunch of stuff to help me remember how to do things in mkdocs-material.","title":"Random"},{"location":"random/#abbreviations","text":"","title":"Abbreviations"},{"location":"random/#admonitions","text":"Note I'm a note annotation. Note I'm a collapsable note annotation!","title":"Admonitions"},{"location":"random/#annotations","text":"Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! I can contain code , formatted text , images, ... basically anything that can be expressed in Markdown.","title":"Annotations"},{"location":"random/#buttons","text":"DO NOT PUSH THIS DEFAULT BUTTON DO NOT PUSH THIS PRIMARY BUTTON DO NOT PUSH THIS ICON BUTTON","title":"Buttons"},{"location":"random/#code-blocks","text":"","title":"Code Blocks"},{"location":"random/#default","text":"from rich import inspect","title":"default"},{"location":"random/#with-title","text":"now with a title! from rich import inspect","title":"with title"},{"location":"random/#with-linenums","text":"now with linenums! 1 2 3 4 from rich import inspect list1 = [ 'thing1' , 'thing2' , 'thing3' ] inspect ( list1 , all = True )","title":"with linenums"},{"location":"random/#with-highlights","text":"now with highlights! 1 2 3 4 from rich import inspect list1 = [ 'thing1' , 'thing2' , 'thing3' ] inspect ( list1 , all = True )","title":"with highlights"},{"location":"random/#in-line","text":"The range () function is used to generate a sequence of numbers.","title":"in-line"},{"location":"random/#tables","text":"","title":"Tables"},{"location":"random/#default_1","text":"Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"default"},{"location":"random/#right-aligned","text":"Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"right-aligned"},{"location":"random/#right-and-left-aligned","text":"Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"right-and-left-aligned"},{"location":"random/#sortable","text":"Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"sortable?"},{"location":"random/#lists","text":"","title":"Lists"},{"location":"random/#unordered","text":"Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.","title":"unordered"},{"location":"random/#ordered","text":"Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu","title":"ordered"},{"location":"tags/","text":"Tags Following is a list of relevant tags: bots Make Bots evil Make Bots python Make Bots","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"},{"location":"tags/#bots","text":"Make Bots","title":"bots"},{"location":"tags/#evil","text":"Make Bots","title":"evil"},{"location":"tags/#python","text":"Make Bots","title":"python"},{"location":"tags/","text":"Tags Following is a list of relevant tags: bots Make Bots evil Make Bots python Make Bots","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"},{"location":"tags/#bots","text":"Make Bots","title":"bots"},{"location":"tags/#evil","text":"Make Bots","title":"evil"},{"location":"tags/#python","text":"Make Bots","title":"python"}]}